---
- hosts: localhost
  become: true
  become_user: root
  vars:
    bump_enabled: true
    rbenv:
      env: user
      version: v1.1.2
      default_ruby: 2.7.2
      rubies:
        - version: 2.7.2
  handlers:
    - name: ibus restart
      command: ibus restart
  # Install Ruby environment
  roles:
    - role: zzet.rbenv
      rbenv_users:
        - paul
    - role: abdennour.golang
      become: yes
      golang_version: "1.16"
      golang_packages: []
      golang_users:
      - "paul" # "{{ansible_ssh_user}}" might be suitable

  tasks:
    - command: lsb_release -cs
      register: distribution_release
      check_mode: no

    - set_fact:
        ansible_distribution_release: "{{ distribution_release.stdout }}"

    # apt install common packages
    - name: Install common packages
      apt:
        name: [sudo, rsync, curl, wget, byobu, emacs, git, apt-transport-https, ca-certificates, bash-completion, python3-pip, pass, htop, peek, sqlite3, ibus, im-config, pulseaudio, pulseaudio-module-bluetooth, pavucontrol, bluez, bluez-firmware, gnupg2, gnupg-agent, pinentry-curses, scdaemon, pcscd, yubikey-personalization, libusb-1.0-0-dev, jq, ipcalc, tlp, gimp, vlc, net-tools, fonts-takao-mincho, default-jdk, shellcheck, pandoc]
        state: present
        update_cache: yes
        cache_valid_time: 86400
    - name: Install cheat python package
      pip:
        name: cheat

    # Install ibus-emoji (Emoji keyboard)
    - name: Fetch repostiory for ibus-uniemoji
      git:
        repo: "https://github.com/salty-horse/ibus-uniemoji.git"
        dest: ~/devel/ibus-uniemoji/
      become: true
      become_user: paul
    - name: Check existing ibus-uniemoji installation
      stat:
        path: /home/paul/devel/ibus-uniemoji/uniemoji.xml
      register: ibus_uniemoji
    - name: Install ibus-uniemoji
      make:
        chdir: /home/paul/devel/ibus-uniemoji
        target: install
      when: not ibus_uniemoji.stat.exists
      notify: ibus restart

    # Add Spotify dedicated deb repo
    - name: Receive Spotify gpg key
      apt_key:
        url: https://download.spotify.com/debian/pubkey_0D811D58.gpg
        state: present
    - name: Add Spotify repository
      apt_repository:
        repo: "deb http://repository.spotify.com stable non-free"
        state: present

    # Add Element-desktop dedicated deb repository
    - name: Make sure shared keyring dir exists
      file:
        path: /usr/share/keyrings
        state: directory
    - name: Fetch riot-em public key
      get_url:
        url: "https://packages.riot.im/debian/riot-im-archive-keyring.gpg"
        dest: /usr/share/keyrings/riot-im-archive-keyring.gpg
    - name: Add riot-im (old Element name) repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/riot-im-archive-keyring.gpg] https://packages.riot.im/debian/ default main"
        state: present

    # Add unstable debian repository
    - name: Add specified repository into sources list
      apt_repository:
        repo: deb http://deb.debian.org/debian/ unstable main contrib non-free
        state: present
    - name: Set low-priority on unstable channel
      blockinfile:
        block: |
          Package: *
          Pin: release n=bullseye
          Pin-Priority: 900

          Package: *
          Pin release a=unstable
          Pin-Priority: 10

          Package: *
          Pin release n=unstable
          Pin-Priority: 10
        path: /etc/apt/preferences.d/99pin-unstable
        create: yes

    # Install recent softwares
    - name: Install more recent softwares
      apt:
        name: [firefox, webext-browserpass, element-desktop, spotify-client]
        default_release: unstable
        update_cache: yes
        cache_valid_time: 86400

    # - name: Create firefox desktop link
    #   copy:
    #     src: firefox.desktop
    #     dest: /usr/share/applications/firefox-stable.desktop
    - name: Uninstall firefox-esr
      apt:
        name: firefox-esr
        state: absent

    # Install Docker
    - name: Receive Docker gpg key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian buster stable"
        state: present
        update_cache: true
    - name: Install docker
      apt:
        name: [docker-ce, docker-ce-cli, containerd.io]
        state: present
        update_cache: yes
        cache_valid_time: 86400

    - name: Install docker credential helper
      unarchive:
        src: "{{ item }}"
        dest: /usr/local/bin
        remote_src: yes
      with_items:
        - https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-pass-v0.6.3-amd64.tar.gz

    # Install kubectl
    # - name: Receive google cloud gpg key
    #   apt_key:
    #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #     state: present
    # - name: Add Kubernetes repository
    #   apt_repository:
    #     repo: "deb http://apt.kubernetes.io/ kubernetes-stretch main"
    #     state: present
    # - name: Install kubectl
    #   apt:
    #     name: kubectl
    #     state: present
    #     update_cache: yes
    #     cache_valid_time: 86400

    # Install nextcloud desktop client
    - name: Receive nextcloud-devs gpg key
      apt_key:
        id: 1FCD77DD0DBEF5699AD2610160EE47FBAD3DD469
        keyserver: keyserver.ubuntu.com
        state: present
    - name: Add PPA nextcloud-devs
      apt_repository:
        repo: "deb http://ppa.launchpad.net/nextcloud-devs/client/ubuntu bionic main"
        state: present
    - name: Install nextcloud-desktop
      apt:
        name: nextcloud-desktop
        state: present
        update_cache: yes
        cache_valid_time: 86400

    # Install Weechat
    - name: Receive WeeChat gpg key
      apt_key:
        id: 11E9DE8848F2B65222AA75B8D1820DB22A11534E
        keyserver: p80.pool.sks-keyservers.net
    - name: Add WeeChat repository
      apt_repository:
        repo: "deb https://weechat.org/debian {{ ansible_distribution_release }} main"
        state: present
    - name: Install weechat
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        cache_valid_time: 86400
      with_items: [weechat-curses, weechat-plugins, weechat-python, weechat-perl]
    - name: Install weeslack dependencies
      pip:
        name: websocket-client

    # Install custom Emacs configuration
    - name: Check existing emacs config
      stat:
        path: /home/paul/.emacs.d
      become: true
      become_user: paul
      register: sym
    - name: Move emacs config if not a link
      copy:
        src: /home/paul/.emacs.d
        dest: /home/paul/.emacs.d.bak
      become: true
      become_user: paul
      when: sym.stat.islnk is defined and not sym.stat.islnk
    - name: Remove emacs config if not a link
      file:
        state: absent
        path: /home/paul/.emacs.d
      become: true
      become_user: paul
      when: sym.stat.islnk is defined and not sym.stat.islnk
    - name: Install Paul s emacs config
      git:
        repo: 'https://github.com/paulrbr/emacs.d'
        dest: /home/paul/.emacs.d.git
      ignore_errors: true
      become: true
      become_user: paul
    - name: Link emacs config
      file:
        state: link
        src: /home/paul/.emacs.d.git
        dest:  /home/paul/.emacs.d
      become: true
      become_user: paul
    - name: Install Gnome Config tool
      apt:
        name: gconf2
        state: present
        update_cache: yes
        cache_valid_time: 86400
    - name: Allow org-protocol url handlers in gnome
      command: "{{ item }}"
      with_items:
        - "gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command '/usr/bin/emacsclient %s' --type String"
        - "gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true"
      become: true
      become_user: paul
    - name: Register emacsclient as the org-protocol handler
      copy:
        content: |
          [Desktop Entry]
          Name=org-protocol
          Exec=emacsclient %u
          Type=Application
          Terminal=false
          Categories=System;
          MimeType=x-scheme-handler/org-protocol;
        dest: "/home/paul/.local/share/applications/org-protocol.desktop"
      become: true
      become_user: paul

    - name: Reload desktop environment
      shell:
        cmd: update-desktop-database ~/.local/share/applications/
      become: true
      become_user: paul

    - name: Show week numbers in calendar of Gnome
      command: "gsettings set org.gnome.desktop.calendar show-weekdate true"
      become: true
      become_user: paul

    # Install custom bash profile
    - name: Check existing profile
      stat:
        path: /home/paul/.profile
      become: true
      become_user: paul
      register: sym
    - name: Fetch profile
      get_url:
        url: "https://raw.githubusercontent.com/paulRbr/profile/master/install"
        dest: /tmp/profile-install.sh
      when: sym.stat.islnk is defined and not sym.stat.islnk
    - name: Install profile
      command: "bash /tmp/profile-install.sh && rm /tmp/profile-install.sh"
      become: true
      become_user: paul
      when: sym.stat.islnk is defined and not sym.stat.islnk

    # Install "$HOME" opt dir
    - name: Check existing /opt directory
      stat:
        path: /opt
      register: sym
    - name: Move /opt if not a link
      copy:
        src: /opt
        dest: /opt.bak
      when: sym.stat.islnk is defined and not sym.stat.islnk
    - name: Remove /opt if not a link
      file:
        state: absent
        path: /opt
      when: sym.stat.islnk is defined and not sym.stat.islnk
    - name: Link /home/paul/opt
      file:
        state: link
        src: /home/paul/opt
        dest:  /opt

    # Setup ruby env (install common ruby gems)
    - name: Install ruby gems
      gem:
        name: "{{ item }}"
        state: present
      with_items: [bundler, rotp]
      become: true
      become_user: paul

    # Install Dhall binaries
    - name: Fetch dhall-json binaries
      unarchive:
        src: "{{ item }}"
        dest: /usr/local/bin
        remote_src: yes
        extra_opts:
          - "--bzip2"
          - "--strip-components"
          - "2"
      with_items:
        - https://github.com/dhall-lang/dhall-haskell/releases/download/1.38.1/dhall-json-1.7.6-x86_64-linux.tar.bz2
        - https://github.com/dhall-lang/dhall-haskell/releases/download/1.38.1/dhall-1.38.1-x86_64-linux.tar.bz2
        - https://github.com/dhall-lang/dhall-haskell/releases/download/1.38.1/dhall-openapi-1.0.0-x86_64-linux.tar.bz2
        - https://github.com/dhall-lang/dhall-haskell/releases/download/1.38.1/dhall-yaml-1.2.6-x86_64-linux.tar.bz2

    # Install & configure minidlna
    - name: Install minidlna
      apt:
        name: minidlna
        state: present


    # Install Rust
    - name: Check existing rustup binary
      stat:
        path: /home/paul/.cargo/bin/rustup
      register: rustup_binary

    - name: Fetch Rustup installation script
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/install-rustup.sh
      when: rustup_binary.stat.executable is not defined

    - name: Install Rustup
      shell:
        cmd: cat /tmp/install-rustup.sh | sh -s -- -y
      become: true
      become_user: paul
      when: rustup_binary.stat.executable is not defined

    - name: Use latest stable version of Rust
      shell:
        cmd: rustup update
      become: true
      become_user: paul

    - name: Fetch Rust utilies RLS & rustfmt
      shell:
        cmd: rustup component add rls rust-analysis rust-src rustfmt
      become: true
      become_user: paul

    # Install Deno
    - name: Check existing deno binary
      stat:
        path: /home/paul/.deno/bin/deno
      register: deno_binary

    - name: Fetch Deno installation script
      get_url:
        url: https://deno.land/x/install/install.sh
        dest: /tmp/install-deno.sh
      when: deno_binary.stat.executable is not defined

    - name: Install Deno
      shell:
        cmd: cat /tmp/install-deno.sh | sh -s
      become: true
      become_user: paul
      when: deno_binary.stat.executable is not defined

    # Install NVM
    - name: Check existing node
      stat:
        path: /usr/bin/node
      register: node_binary

    - name: Get NVM installation script
      get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh
        dest: /tmp/nvm_install.sh
      when: node_binary.stat.executable is not defined

    - name: Install NVM
      command: sh /tmp/nvm_install.sh
      become: true
      become_user: paul
      when: node_binary.stat.executable is not defined

    - name: Install node
      shell:
        cmd: "bash -l -c 'nvm install node'"
      when: node_binary.stat.executable is not defined
      become: true
      become_user: paul

    # Install Yarn
    - name: Receive YarnPKG gpg key
      apt_key:
        url: https://dl.yarnpkg.com/debian/pubkey.gpg
        state: present
    - name: Add YarnPKG repository
      apt_repository:
        repo: "deb https://dl.yarnpkg.com/debian/ stable main"
        state: present
    - name: Install yarn
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        cache_valid_time: 86400
      with_items: [yarn]

    # Install global NPM packages
    # - name: Install Node generic packages
    #   npm:
    #     name: "{{ item }}"
    #     state: present
    #     global: yes
    #   with_items: [eslint_d]
    #   become: true
    #   become_user: paul

    # Include Fretlink dependencies
    - include: tasks/fretlink.yml
      when: fretlink_enabled | default(false)
      tags: [ 'fretlink' ]

    # Include Bump dependencies
    - include: tasks/bump.yml
      when: bump_enabled | default(false)
      tags: [ 'bump' ]
